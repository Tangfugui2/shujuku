实验五 通用接口数据库编程
        
【实验目的】 
1、了解数据库应用结构。
2、掌握数据库接口，如何通过相关接口访问数据库。
3、掌握数据库编程过程尤其连接数据库、表现数据库。
【实验性质】 
综合性实验
【实验学时】
2H
【实验内容】 
1、用自己熟悉的语言（平台）完成对MySQL单表的查询、插入、删除、修改数据。（可以通过ODBC或者JDBC等不同方式）。
2、给出主要代码并注释。
public class StudentDao {
	//数据库连接实例conn
	private Connection conn=null;
	
	//构造函数，并通过JDBCUtil这个工具类来实例化conn
	public StudentDao() {
		super();
		this.conn = JDBCUtil.getConnection();
	}

	/**
	 * 
	 * @param student
	 * @return true表示插入成功，false表示插入失败
	 * @throws SQLException  SQL语句执行异常
	 */
	public boolean insertStudent(Student student) throws SQLException
	{
		String sqlString="insert into student(id,name,classes,sex) values ('"+
				student.getId()+"','"+student.getName()+"','"+student.getClasses()
				+"','"+student.getSex()+"')";
		System.out.println("插入语句:"+sqlString);
		//创建Statement 对象 
		Statement stmt=conn.createStatement();
	    //执行SQL语句
		int bool=stmt.executeUpdate(sqlString);
		return  bool>0?true:false;
	}
	/**
	 * 
	 * @param id 学生学号
	 * @return  true表示删除成功，false表示删除失败
	 * @throws SQLException SQL语句执行异常
	 */
	public boolean deleteStudent(String id) throws SQLException
	{
		String sqlString="delete from student where id= '"+id+"'";
		System.out.println("删除语句:"+sqlString);	
		//创建Statement 对象 
		Statement stmt=conn.createStatement();
		//执行SQL语句
		int bool=stmt.executeUpdate(sqlString);
		return  bool>0?true:false;
	}
	/**
	 * 修改学生信息函数
	 * @param student 传入学生对象
	 * @return true表示修改成功，false表示修改失败
	 * @throws SQLException
	 */
	public boolean updateStudent(Student student) throws SQLException
	{
		String sqlString="update student set name='"+student.getName()
				+"', classes='"+student.getClasses()+"',sex='"+student.getSex()
				+"' where id='"+student.getId()+"'";
		System.out.println("修改语句:"+sqlString);
		//创建Statement 对象 
		Statement stmt=conn.createStatement();
		//执行SQL语句
		int bool=stmt.executeUpdate(sqlString);
		return   bool>0?true:false;
	}
	/**
	 * 查询所有学生信息的函数
	 * @return 返回一个List链表，链表中存放的是Student对象。
	 * @throws SQLException SQL语句执行异常
	 */
	public List<Student> selectAllStudent() throws SQLException
	{
		String sqlString="select * from student";
		System.out.println("查询语句:"+sqlString);
		//创建Statement 对象 
		Statement stmt=conn.createStatement();
		//执行SQL语句，返回结构集
		ResultSet rs=stmt.executeQuery(sqlString);
		//用ResultSetToList（）来
		return ResultSetToList(rs);
	}
	/**
	 * 根据学生学号查询学生信息
	 * @param idTemp 学生学号（id）
	 * @return 返回一个List链表，链表中存放的是Student对象。
	 * @throws SQLException
	 */
	public List<Student> selectOneStudent(String idTemp) throws SQLException
	{
		
		String sqlString="select * from student where id='"+idTemp+"'";
		System.out.println("查询语句:"+sqlString);
		Statement stmt=conn.createStatement();
		ResultSet rs=stmt.executeQuery(sqlString);
		return ResultSetToList(rs);
	}
	/**
	 * 
	 * @param rs 执行查询语句后返回的结果集实例。
	 * @return 返回一个List链表，链表中存放的是Student对象。
	 * @throws SQLException
	 */
private List<Student> ResultSetToList(ResultSet rs) throws SQLException
{
	  List<Student> listStudents=new ArrayList<Student>();
	  Student student=null;
	  while (rs.next()){  
		  String id=rs.getString("id");
		  String name=rs.getString("name");
		  String classes=rs.getString("classes");
		  String sex=rs.getString("sex");
		  student=new Student(id, name, classes, sex);
		  listStudents.add(student);
	  }
	  return listStudents;
}}


public class ResultTableModel extends AbstractTableModel{
	private static final long serialVersionUID = 9007911098730480622L;
	//这个是JTable的标题栏的数据。
    private String columnName[]={"学号","姓名","班级","性别"};
    //这个链表保存了从数据库查询到的学生信息
	private List<Student> listStudent=null;
	
	public ResultTableModel(List<Student> listStudent) {
		super();
		this.listStudent = listStudent;
		
	}
    //返回JTable有多少列
	@Override
	public int getColumnCount() {
		return 4;
	}
	 //返回JTable有多少行
	@Override
	public int getRowCount() {
		if(listStudent==null||listStudent.size()==0)
			return 0;
		return listStudent.size();
	}
	 //返回JTable中第rowIndex行，第columnIndex列的数据
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		
		String temp= listStudent.get(rowIndex).returnValueByChoose(columnIndex);
		return temp!=null?temp:" ";
	}

	@Override
	public String getColumnName(int column) {
		return columnName[column];
	}

}


public class JDBCUtil {
	/**
	 * config是Properties类的实例，这个类用来操作以.properties结尾的文件是十分方便的。
	 */
    public static final Properties config = new Properties();

    static {
    	//读取oracle.properties文件，并返回一个文件流
        InputStream in = JDBCUtil.class.getClassLoader().getResourceAsStream(
                "jdbc.properties");
        try {
            config.load(in);
            //下面是加载驱动的代码
            Class.forName(config.getProperty("driver"));
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }}}
   /**
    * 获取一个数据库连接池
    * @return Connection的实例
    */
    public static Connection getConnection() {
        Connection conn = null;
        //从oracle.properties文件中读取相应的字段
        String url = config.getProperty("url");
        String user = config.getProperty("user");
        String password = config.getProperty("password");
        
        System.out.println(url+"  "+user+"  "+password);
        try {
        	//获取一个数据库连接
            conn = DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return conn;
    }
 /**
  * 释放数据库连接的方法
  * @param conn 数据连接实例
  */
    public static void release( Connection conn) {
        if (conn != null) {
            try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            } }}}

【实验总结】 
请根据实验内容谈谈你对本次实验的收获、感想，或提出你对实验内容的建议等等。
掌握数据库接口，如何通过相关接口访问数据库。掌握数据库编程过程尤其连接数据库、表现数据库。对于一些基本知识有了一定的了解。对于数据库的建立有了更深层次的认识。




批改教师评语：	

实验报告成绩：	
批改教师签字	
批改时间：	

